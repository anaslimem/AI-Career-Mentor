name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Free up disk space BEFORE building
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # Additional manual cleanup
      - name: Clean up system
        run: |
          sudo apt-get clean
          sudo apt-get autoremove -y
          docker system prune -af --volumes
          df -h
          echo "Available disk space after cleanup:"
          df -h /

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Set up Docker Buildx with limited cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build backend with optimized settings
      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-backend:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Clean Docker cache between builds
        run: |
          docker system prune -f
          df -h

      # Build frontend with optimized settings
      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-frontend:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=min
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Set up Minikube
      - name: Stop Minikube
        run: minikube stop || true
      - name: Start Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.32.0
          kubernetes-version: 1.28.3

      # Clean up old deployments and services
      - name: Cleanup old deployments
        run: |
          kubectl delete deployment career-mentor-backend --ignore-not-found
          kubectl delete deployment career-mentor-frontend --ignore-not-found
          kubectl delete service career-mentor-backend --ignore-not-found
          kubectl delete service career-mentor-frontend --ignore-not-found

      # Ensure Tavily secret exists
      - name: Create/Update Tavily Secret
        run: |
          kubectl delete secret tavily-secret --ignore-not-found
          kubectl create secret generic tavily-secret --from-literal=TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/career-mentor-backend --timeout=1000s
          kubectl rollout status deployment/career-mentor-frontend --timeout=1000s

      # Debugging: Get pod status and logs if rollout fails
      - name: Get pod status and logs if rollout fails
        if: failure()
        run: |
          kubectl get pods -A
          kubectl describe deployment career-mentor-backend
          kubectl logs $(kubectl get pods -l app=career-mentor-backend -o jsonpath="{.items[0].metadata.name}")

      # Final cleanup
      - name: Final cleanup
        if: always()
        run: |
          docker system prune -af --volumes
          df -h
