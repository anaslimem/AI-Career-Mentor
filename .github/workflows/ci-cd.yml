name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Install dependencies (if needed for testing)
      - name: Install dependencies
        run: |
          cd app/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests (optional but recommended)
      - name: Run tests
        run: |
          cd app/backend
          # pytest tests/ || echo "No tests found"

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push backend image
      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-backend:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push frontend image
      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-career-mentor-frontend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Set up Minikube
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.32.0
          kubernetes-version: 1.28.3

      # Wait for Minikube to be ready
      - name: Wait for Minikube
        run: |
          minikube status
          kubectl cluster-info

      # Update image pull policy for development
      - name: Configure Minikube for local images
        run: |
          eval $(minikube docker-env)
          minikube addons enable ingress

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          # Replace image tags with commit SHA for proper deployment
          sed -i "s|:latest|:${{ github.sha }}|g" k8s/backend-deployment.yaml
          sed -i "s|:latest|:${{ github.sha }}|g" k8s/frontend-deployment.yaml
          
          # Apply configurations
          kubectl apply -f k8s/
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment --all

      # Verify deployment
      - name: Verify Deployment
        run: |
          echo "=== Checking Deployments ==="
          kubectl get deployments
          
          echo "=== Checking Pods ==="
          kubectl get pods -o wide
          
          echo "=== Checking Services ==="
          kubectl get services
          
          echo "=== Pod Logs (Backend) ==="
          kubectl logs -l app=ai-career-mentor-backend --tail=20 || echo "Backend not ready yet"
          
          echo "=== Pod Logs (Frontend) ==="
          kubectl logs -l app=ai-career-mentor-frontend --tail=20 || echo "Frontend not ready yet"

      # Clean up (optional)
      - name: Clean up old images
        run: |
          docker system prune -f
